openapi: 3.0.3
info:
  title: EZ-GO - OpenAPI 3.0
  version: 1.0.0
  description: Trafic Light Management Backend
externalDocs:
  description: Find out more about Eclipse Dirigible
  url: https://dirigible.io
servers:
  - url: /services/ts
tags:
  - name: JunctionData
  - name: Junction
  - name: Edge
paths:
  /ez-go/gen/ez-go/api/JunctionData/JunctionDataService.ts:
    get:
      summary: List JunctionData
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - JunctionData
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JunctionData'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create JunctionData
      tags:
        - JunctionData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionData'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JunctionData'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/JunctionData/JunctionDataService.ts/{id}:
    get:
      summary: Get JunctionData by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - JunctionData
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JunctionData'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update JunctionData by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - JunctionData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionData'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JunctionData'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete JunctionData by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - JunctionData
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/JunctionData/JunctionDataService.ts/count:
    get:
      summary: Count the number of JunctionData
      tags:
        - JunctionData
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of JunctionData by JunctionDataFilterOptions
      tags:
        - JunctionData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionDataFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/JunctionData/JunctionDataService.ts/search:
    post:
      summary: Search JunctionData by JunctionDataFilterOptions
      tags:
        - JunctionData
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionDataFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/JunctionData'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Junction/JunctionService.ts:
    get:
      summary: List Junction
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Junction
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Junction'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Junction
      tags:
        - Junction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Junction'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Junction'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Junction/JunctionService.ts/{id}:
    get:
      summary: Get Junction by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Junction
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Junction'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Junction by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Junction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Junction'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Junction'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Junction by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Junction
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Junction/JunctionService.ts/count:
    get:
      summary: Count the number of Junction
      tags:
        - Junction
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Junction by JunctionFilterOptions
      tags:
        - Junction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithContains:
                summary: Count with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Junction/JunctionService.ts/search:
    post:
      summary: Search Junction by JunctionFilterOptions
      tags:
        - Junction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JunctionFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    contains:
                      Name: "abcd"
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithContains:
                summary: Search with Contains
                value:
                  $filter:
                    contains:
                      Name: "abcd"
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Junction'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Edge/EdgeService.ts:
    get:
      summary: List Edge
      parameters:
        - in: query
          name: $limit
          description: The number of records to be returned _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
        - in: query
          name: $offset
          description: The number of records to skip _(both `$limit` and `$offset` should be provided)_.
          required: false
          allowReserved: true
          schema:
            type: integer
            allowEmptyValue: true
      tags:
        - Edge
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Edge'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create Edge
      tags:
        - Edge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      responses:
        201:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Edge/EdgeService.ts/{id}:
    get:
      summary: Get Edge by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Edge
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Edge'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update Edge by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Edge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Edge'
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Edge'
        400:
          description: Bad Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete Edge by Id
      parameters:
        - in: path
          name: id
          description: The Id of the entity.
          required: true
          schema:
            type: string
      tags:
        - Edge
      responses:
        204:
          description: Successful Request
        404:
          description: Entity Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Edge/EdgeService.ts/count:
    get:
      summary: Count the number of Edge
      tags:
        - Edge
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Count the number of Edge by EdgeFilterOptions
      tags:
        - Edge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeFilterOptions'
            examples:
              countWithMultipleCriteria:
                summary: Count with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              countWithEquals:
                summary: Count with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              countWithNotEquals:
                summary: Count with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              countWithGreaterThan:
                summary: Count with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              countWithGreaterThanOrEqual:
                summary: Count with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              countWithLessThan:
                summary: Count with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              countWithLessThanOrEqual:
                summary: Count with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: integer
                example: 100
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /ez-go/gen/ez-go/api/Edge/EdgeService.ts/search:
    post:
      summary: Search Edge by EdgeFilterOptions
      tags:
        - Edge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EdgeFilterOptions'
            examples:
              searchWithMultipleCriteria:
                summary: Search with multiple criteria
                value:
                  $filter:
                    notEquals:
                      Id: 33
                    greaterThan:
                      Id: 0
                    lessThanOrEqual:
                      Id: 100
              searchWithEquals:
                summary: Search with Equals
                value:
                  $filter:
                    equals:
                      Id: 0
              searchWithNotEquals:
                summary: Search with Not Equals
                value:
                  $filter:
                    notEquals:
                      Id: 0
              searchWithGreaterThan:
                summary: Search with Greater Than
                value:
                  $filter:
                    greaterThan:
                      Id: 0
              searchWithGreaterThanOrEqual:
                summary: Search with Greater Than Or Equal
                value:
                  $filter:
                    greaterThanOrEqual:
                      Id: 0
              searchWithLessThan:
                summary: Search with Less Than
                value:
                  $filter:
                    lessThan:
                      Id: 0
              searchWithLessThanOrEqual:
                summary: Search with Less Than Or Equal
                value:
                  $filter:
                    lessThanOrEqual:
                      Id: 0
        required: true
      responses:
        200:
          description: Successful Request
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: '#/components/schemas/Edge'
        403:
          description: Forbidden Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    JunctionData:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        IsRaining:
          type: boolean
        Junction:
          type: integer
          format: int32
        Timestamp:
        IsFallen:
          type: boolean
        IsNoisy:
          type: boolean
        IsAmbulancePassing:
          type: boolean
    JunctionDataFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                IsRaining:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Junction:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Timestamp:
                  oneOf:
                IsFallen:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                IsNoisy:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                IsAmbulancePassing:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                IsRaining:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                Junction:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Timestamp:
                  oneOf:
                IsFallen:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                IsNoisy:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
                IsAmbulancePassing:
                  oneOf:
                    - type: boolean
                    - type: array
                      items:
                        type: boolean
            contains:
              type: object
              properties:
                Id:
                IsRaining:
                Junction:
                Timestamp:
                IsFallen:
                IsNoisy:
                IsAmbulancePassing:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                IsRaining:
                Junction:
                  type: integer
                  format: int32
                Timestamp:
                IsFallen:
                IsNoisy:
                IsAmbulancePassing:
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                IsRaining:
                Junction:
                  type: integer
                  format: int32
                Timestamp:
                IsFallen:
                IsNoisy:
                IsAmbulancePassing:
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                IsRaining:
                Junction:
                  type: integer
                  format: int32
                Timestamp:
                IsFallen:
                IsNoisy:
                IsAmbulancePassing:
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                IsRaining:
                Junction:
                  type: integer
                  format: int32
                Timestamp:
                IsFallen:
                IsNoisy:
                IsAmbulancePassing:
        $select:
          type: array
          example: ["Id", "IsRaining", "Junction", "Timestamp", "IsFallen", "IsNoisy", "IsAmbulancePassing"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,IsRaining,Junction,Timestamp,IsFallen,IsNoisy,IsAmbulancePassing"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Junction:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Name:
          type: string
          minLength: 0
          maxLength: 50
    JunctionFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 50
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 50
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Name:
                  oneOf:
                    - type: string
                      minLength: 0
                      maxLength: 50
                    - type: array
                      items:
                        type: string
                        format: double
                        minLength: 0
                        maxLength: 50
            contains:
              type: object
              properties:
                Id:
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Name:
                  type: string
                  minLength: 0
                  maxLength: 50
        $select:
          type: array
          example: ["Id", "Name"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Name"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Edge:
      type: object
      required:
      properties:
        Id:
          type: integer
          format: int32
        Weight:
          type: number
          format: double
        Junction1:
          type: integer
          format: int32
        Junction2:
          type: integer
          format: int32
    EdgeFilterOptions:
      type: object
      properties:
        $filter:
          type: object
          properties:
            equals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Weight:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Junction1:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Junction2:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            notEquals:
              type: object
              properties:
                Id:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Weight:
                  oneOf:
                    - type: number
                      format: double
                    - type: array
                      items:
                        type: number
                        format: double
                Junction1:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
                Junction2:
                  oneOf:
                    - type: integer
                      format: int32
                    - type: array
                      items:
                        type: integer
                        format: int32
            contains:
              type: object
              properties:
                Id:
                Weight:
                Junction1:
                Junction2:
            greaterThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Weight:
                  type: number
                  format: double
                Junction1:
                  type: integer
                  format: int32
                Junction2:
                  type: integer
                  format: int32
            greaterThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Weight:
                  type: number
                  format: double
                Junction1:
                  type: integer
                  format: int32
                Junction2:
                  type: integer
                  format: int32
            lessThan:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Weight:
                  type: number
                  format: double
                Junction1:
                  type: integer
                  format: int32
                Junction2:
                  type: integer
                  format: int32
            lessThanOrEqual:
              type: object
              properties:
                Id:
                  type: integer
                  format: int32
                Weight:
                  type: number
                  format: double
                Junction1:
                  type: integer
                  format: int32
                Junction2:
                  type: integer
                  format: int32
        $select:
          type: array
          example: ["Id", "Weight", "Junction1", "Junction2"]
          items:
            type: string
        $sort:
          - type: string
            example: "Id,Weight,Junction1,Junction2"
        $order:
          type: string
          enum: ["asc", "desc"]
          example: "asc"
        $offset:
          type: integer
          example: 0
        $limit:
          type: integer
          example: 10
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string